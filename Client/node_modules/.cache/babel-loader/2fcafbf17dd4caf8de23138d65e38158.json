{"ast":null,"code":"var _jsxFileName = \"/Users/yuhojin/Desktop/BEB_01_WhyDoesItWork/Client/src/Header/HeaderComponent/hcSearch.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst deselectedOptions = ['rustic', 'antique', 'vinyl', 'vintage', 'refurbished', '신품', '빈티지', '중고A급', '중고B급', '골동품'];\n/* TODO : 아래 CSS를 자유롭게 수정하세요. */\n\nconst boxShadow = '0 4px 6px rgb(32 33 36 / 28%)';\nconst activeBorderRadius = '1rem 1rem 0 0';\nconst inactiveBorderRadius = '1rem 1rem 1rem 1rem';\nexport const InputContainer = styled.div`\n  //margin-top: 8rem;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: row;\n  padding: 1rem;\n  border: 1px solid rgb(223, 225, 229);\n  border-radius: ${inactiveBorderRadius};\n  z-index: 3;\n  box-shadow: 0;\n\n  &:focus-within {\n    box-shadow: ${boxShadow};\n  }\n\n  > input {\n    flex: 1 0 0;\n    background-color: transparent;\n    border: none;\n    margin: 0;\n    padding: 0;\n    outline: none;\n    font-size: 16px;\n  }\n\n  > div.delete-button {\n    cursor: pointer;\n  }\n`;\n_c = InputContainer;\nexport const DropDownContainer = styled.ul`\n  background-color: #ffffff;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n  padding-inline-start: 0px;\n  margin-top: -1px;\n  padding: 0.5rem 0;\n  border: 1px solid rgb(223, 225, 229);\n  border-radius: 0 0 1rem 1rem;\n  box-shadow: ${boxShadow};\n  z-index: 3;\n\n  > li {\n    padding: 0 1rem;\n  }\n`; //export const Autocomplete = () => {\n\n_c2 = DropDownContainer;\nexport const Search = () => {\n  _s();\n\n  /**\n   * Autocomplete 컴포넌트는 아래 3가지 state가 존재합니다. 필요에 따라서 state를 더 만들 수도 있습니다.\n   * - hasText state는 input값의 유무를 확인할 수 있습니다.\n   * - inputValue state는 input값의 상태를 확인할 수 있습니다.\n   * - options state는 input값을 포함하는 autocomplete 추천 항목 리스트를 확인할 수 있습니다.\n   */\n  const [hasText, setHasText] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [selected, setSelected] = useState(-1); // useEffect를 아래와 같이 활용할 수도 있습니다.\n\n  useEffect(() => {\n    if (inputValue === '') {\n      setHasText(false);\n    }\n  }, [inputValue]); // TODO : input과 dropdown 상태 관리를 위한 handler가 있어야 합니다.\n\n  const handleInputChange = event => {\n    /**\n     * handleInputChange 함수는\n     * - input값 변경 시 발생되는 change 이벤트 핸들러입니다.\n     * - input값과 상태를 연결시킬 수 있게 controlled component로 만들 수 있고\n     * - autocomplete 추천 항목이 dropdown으로 시시각각 변화되어 보여질 수 있도록 상태를 변경합니다.\n     *\n     * handleInputChange 함수를 완성하여 아래 3가지 기능을 구현합니다.\n     *\n     * onChange 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 적절하게 변경되어야 합니다.\n     * 2. input값 유무 상태인 hasText가 적절하게 변경되어야 합니다.\n     * 3. autocomplete 추천 항목인 options의 상태가 적절하게 변경되어야 합니다.\n     * Tip : options의 상태에 따라 dropdown으로 보여지는 항목이 달라집니다.\n     */\n    const {\n      value\n    } = event.target;\n    if (value.includes('\\\\')) return; // input에 텍스트가 있는지 없는지 확인하는 코드\n\n    value ? setHasText(true) : setHasText(false); // updateText\n\n    setInputValue(value); // dropdown을 위한 기능\n\n    const filterRegex = new RegExp(value, 'i');\n    const resultOptions = deselectedOptions.filter(option => option.match(filterRegex));\n    setOptions(resultOptions);\n  };\n\n  const handleDropDownClick = clickedOption => {\n    /**\n     * handleDropDownClick 함수는\n     * - autocomplete 추천 항목을 클릭할 때 발생되는 click 이벤트 핸들러입니다.\n     * - dropdown에 제시된 항목을 눌렀을 때, input값이 해당 항목의 값으로 변경되는 기능을 수행합니다.\n     *\n     * handleInputChange 함수를 완성하여 아래 기능을 구현합니다.\n     *\n     * onClick 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 적절하게 변경되어야 합니다.\n     * 2. autocomplete 추천 항목인 options의 상태가 적절하게 변경되어야 합니다.\n     */\n    setInputValue(clickedOption);\n    const resultOptions = deselectedOptions.filter(option => option === clickedOption);\n    setOptions(resultOptions);\n  };\n\n  const handleDeleteButtonClick = () => {\n    /**\n     * handleDeleteButtonClick 함수는\n     * - input의 오른쪽에 있는 X버튼 클릭 시 발생되는 click 이벤트 핸들러입니다.\n     * - 함수 작성을 완료하여 input값을 한 번에 삭제하는 기능을 구현합니다.\n     *\n     * handleDeleteButtonClick 함수를 완성하여 아래 기능을 구현합니다.\n     *\n     * onClick 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 빈 문자열이 되어야 합니다.\n     */\n    setInputValue('');\n  }; // Advanced Challenge: 상하 화살표 키 입력 시 dropdown 항목을 선택하고, Enter 키 입력 시 input값을 선택된 dropdown 항목의 값으로 변경하는 handleKeyUp 함수를 만들고,\n  // 적절한 컴포넌트에 onKeyUp 핸들러를 할당합니다. state가 추가로 필요한지 고민하고, 필요 시 state를 추가하여 제작하세요.\n\n\n  const handleKeyUp = event => {\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#example\n    // eslint-disable-next-line\n    if (event.getModifierState(\"Fn\") || event.getModifierState(\"Hyper\") || event.getModifierState(\"OS\") || event.getModifierState(\"Super\") || event.getModifierState(\"Win\")) return;\n    if (event.getModifierState(\"Control\") + event.getModifierState(\"Alt\") + event.getModifierState(\"Meta\") > 1) return;\n\n    if (hasText) {\n      if (event.code === 'ArrowDown' && options.length - 1 > selected) {\n        setSelected(selected + 1);\n      }\n\n      if (event.code === 'ArrowUp' && selected >= 0) {\n        setSelected(selected - 1);\n      }\n\n      if (event.code === 'Enter' && selected >= 0) {\n        handleDropDownClick(options[selected]);\n        setSelected(-1);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Search\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete-wrapper\",\n      onKeyUp: handleKeyUp,\n      children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n        hasText: hasText,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"autocomplete-input\",\n          onChange: handleInputChange,\n          value: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"delete-button\",\n          onClick: handleDeleteButtonClick,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), hasText ? /*#__PURE__*/_jsxDEV(DropDown, {\n        options: options,\n        handleDropDownClick: handleDropDownClick,\n        selected: selected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"mNazOxgTs41H4fPX0UOrWxKyj5M=\");\n\n_c3 = Search;\nexport const DropDown = _ref => {\n  let {\n    options,\n    handleDropDownClick,\n    selected\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(DropDownContainer, {\n    children: options.map((option, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => handleDropDownClick(option),\n      className: selected === idx ? 'selected' : '',\n      children: option\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_c4 = DropDown;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"InputContainer\");\n$RefreshReg$(_c2, \"DropDownContainer\");\n$RefreshReg$(_c3, \"Search\");\n$RefreshReg$(_c4, \"DropDown\");","map":{"version":3,"sources":["/Users/yuhojin/Desktop/BEB_01_WhyDoesItWork/Client/src/Header/HeaderComponent/hcSearch.js"],"names":["useState","useEffect","styled","deselectedOptions","boxShadow","activeBorderRadius","inactiveBorderRadius","InputContainer","div","DropDownContainer","ul","Search","hasText","setHasText","inputValue","setInputValue","options","setOptions","selected","setSelected","handleInputChange","event","value","target","includes","filterRegex","RegExp","resultOptions","filter","option","match","handleDropDownClick","clickedOption","handleDeleteButtonClick","handleKeyUp","getModifierState","code","length","DropDown","map","idx"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst deselectedOptions = [\n  'rustic',\n  'antique',\n  'vinyl',\n  'vintage',\n  'refurbished',\n  '신품',\n  '빈티지',\n  '중고A급',\n  '중고B급',\n  '골동품'\n];\n\n/* TODO : 아래 CSS를 자유롭게 수정하세요. */\nconst boxShadow = '0 4px 6px rgb(32 33 36 / 28%)';\nconst activeBorderRadius = '1rem 1rem 0 0';\nconst inactiveBorderRadius = '1rem 1rem 1rem 1rem';\n\nexport const InputContainer = styled.div`\n  //margin-top: 8rem;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: row;\n  padding: 1rem;\n  border: 1px solid rgb(223, 225, 229);\n  border-radius: ${inactiveBorderRadius};\n  z-index: 3;\n  box-shadow: 0;\n\n  &:focus-within {\n    box-shadow: ${boxShadow};\n  }\n\n  > input {\n    flex: 1 0 0;\n    background-color: transparent;\n    border: none;\n    margin: 0;\n    padding: 0;\n    outline: none;\n    font-size: 16px;\n  }\n\n  > div.delete-button {\n    cursor: pointer;\n  }\n`;\n\nexport const DropDownContainer = styled.ul`\n  background-color: #ffffff;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n  padding-inline-start: 0px;\n  margin-top: -1px;\n  padding: 0.5rem 0;\n  border: 1px solid rgb(223, 225, 229);\n  border-radius: 0 0 1rem 1rem;\n  box-shadow: ${boxShadow};\n  z-index: 3;\n\n  > li {\n    padding: 0 1rem;\n  }\n`;\n\n//export const Autocomplete = () => {\nexport const Search = () => {\n  /**\n   * Autocomplete 컴포넌트는 아래 3가지 state가 존재합니다. 필요에 따라서 state를 더 만들 수도 있습니다.\n   * - hasText state는 input값의 유무를 확인할 수 있습니다.\n   * - inputValue state는 input값의 상태를 확인할 수 있습니다.\n   * - options state는 input값을 포함하는 autocomplete 추천 항목 리스트를 확인할 수 있습니다.\n   */\n  const [hasText, setHasText] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const [selected, setSelected] = useState(-1);\n\n  // useEffect를 아래와 같이 활용할 수도 있습니다.\n  useEffect(() => {\n    if (inputValue === '') {\n      setHasText(false);\n    }\n  }, [inputValue]);\n\n  // TODO : input과 dropdown 상태 관리를 위한 handler가 있어야 합니다.\n  const handleInputChange = (event) => {\n    /**\n     * handleInputChange 함수는\n     * - input값 변경 시 발생되는 change 이벤트 핸들러입니다.\n     * - input값과 상태를 연결시킬 수 있게 controlled component로 만들 수 있고\n     * - autocomplete 추천 항목이 dropdown으로 시시각각 변화되어 보여질 수 있도록 상태를 변경합니다.\n     *\n     * handleInputChange 함수를 완성하여 아래 3가지 기능을 구현합니다.\n     *\n     * onChange 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 적절하게 변경되어야 합니다.\n     * 2. input값 유무 상태인 hasText가 적절하게 변경되어야 합니다.\n     * 3. autocomplete 추천 항목인 options의 상태가 적절하게 변경되어야 합니다.\n     * Tip : options의 상태에 따라 dropdown으로 보여지는 항목이 달라집니다.\n     */\n    const { value } = event.target;\n    if (value.includes('\\\\')) return;\n\n    // input에 텍스트가 있는지 없는지 확인하는 코드\n    value ? setHasText(true) : setHasText(false);\n\n    // updateText\n    setInputValue(value);\n\n    // dropdown을 위한 기능\n    const filterRegex = new RegExp(value, 'i');\n    const resultOptions = deselectedOptions.filter((option) =>\n      option.match(filterRegex)\n    );\n    setOptions(resultOptions);\n  };\n\n  const handleDropDownClick = (clickedOption) => {\n    /**\n     * handleDropDownClick 함수는\n     * - autocomplete 추천 항목을 클릭할 때 발생되는 click 이벤트 핸들러입니다.\n     * - dropdown에 제시된 항목을 눌렀을 때, input값이 해당 항목의 값으로 변경되는 기능을 수행합니다.\n     *\n     * handleInputChange 함수를 완성하여 아래 기능을 구현합니다.\n     *\n     * onClick 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 적절하게 변경되어야 합니다.\n     * 2. autocomplete 추천 항목인 options의 상태가 적절하게 변경되어야 합니다.\n     */\n    setInputValue(clickedOption);\n    const resultOptions = deselectedOptions.filter(\n      (option) => option === clickedOption\n    );\n    setOptions(resultOptions);\n  };\n\n  const handleDeleteButtonClick = () => {\n    /**\n     * handleDeleteButtonClick 함수는\n     * - input의 오른쪽에 있는 X버튼 클릭 시 발생되는 click 이벤트 핸들러입니다.\n     * - 함수 작성을 완료하여 input값을 한 번에 삭제하는 기능을 구현합니다.\n     *\n     * handleDeleteButtonClick 함수를 완성하여 아래 기능을 구현합니다.\n     *\n     * onClick 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 빈 문자열이 되어야 합니다.\n     */\n    setInputValue('');\n  };\n\n  // Advanced Challenge: 상하 화살표 키 입력 시 dropdown 항목을 선택하고, Enter 키 입력 시 input값을 선택된 dropdown 항목의 값으로 변경하는 handleKeyUp 함수를 만들고,\n  // 적절한 컴포넌트에 onKeyUp 핸들러를 할당합니다. state가 추가로 필요한지 고민하고, 필요 시 state를 추가하여 제작하세요.\n  const handleKeyUp = (event) => {\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#example\n    // eslint-disable-next-line\n    if (event.getModifierState(\"Fn\") || event.getModifierState(\"Hyper\") || event.getModifierState(\"OS\") || event.getModifierState(\"Super\") || event.getModifierState(\"Win\")) return; if (event.getModifierState(\"Control\") + event.getModifierState(\"Alt\") + event.getModifierState(\"Meta\") > 1) return;\n    if (hasText) {\n      if (event.code === 'ArrowDown' && options.length - 1 > selected) {\n        setSelected(selected + 1);\n      }\n      if (event.code === 'ArrowUp' && selected >= 0) {\n        setSelected(selected - 1);\n      }\n      if (event.code === 'Enter' && selected >= 0) {\n        handleDropDownClick(options[selected]);\n        setSelected(-1);\n      }\n    }\n  };\n\n  return (\n    <div className='Search'>\n      <div className='autocomplete-wrapper' onKeyUp={handleKeyUp}>\n        <InputContainer hasText={hasText}>\n          {/* TODO : input 엘리먼트를 작성하고 input값(value)을 state와 연결합니다. handleInputChange 함수와 input값 변경 시 호출될 수 있게 연결합니다. */}\n          <input\n            type='text'\n            className='autocomplete-input'\n            onChange={handleInputChange}\n            value={inputValue}\n          />\n          {/* TODO : 아래 div.delete-button 버튼을 누르면 input 값이 삭제되어 dropdown이 없어지는 handler 함수를 작성합니다. */}\n          <div className='delete-button' onClick={handleDeleteButtonClick}>\n            &times;\n          </div>\n        </InputContainer>\n        {/* TODO : input 값이 없으면 dropdown이 보이지 않아야 합니다. 조건부 렌더링을 이용해서 구현하세요. */}\n        {hasText ? (\n          <DropDown\n            options={options}\n            handleDropDownClick={handleDropDownClick}\n            selected={selected}\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport const DropDown = ({ options, handleDropDownClick, selected }) => {\n  return (\n    <DropDownContainer>\n      {/* TODO : input 값에 맞는 autocomplete 선택 옵션이 보여지는 역할을 합니다. */}\n      {options.map((option, idx) => (\n        <li\n          key={idx}\n          onClick={() => handleDropDownClick(option)}\n          className={selected === idx ? 'selected' : ''}\n        >\n          {option}\n        </li>\n      ))}\n    </DropDownContainer>\n  );\n};"]},"metadata":{},"sourceType":"module"}